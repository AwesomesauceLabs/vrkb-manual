#!/bin/bash
set -eu -o pipefail

if [ $# -ne 1 ]; then
	echo "Usage: $(basename $0): <vrkb_unity_project_dir>" >&2
	exit 1
fi
vrkb_dir=$(realpath "$1"); shift;

# Add helper scripts to $PATH

export PATH="$(dirname $0)/bin":$PATH

# Copy latest version of JSON keyboard config file

vrkb_config_file=${vrkb_dir}/Assets/VRKB/Config/qwerty-compact.json
examples_dir=examples
example_config_file=${examples_dir}/qwerty-compact.json
mkdir -p ${examples_dir}
cp ${vrkb_config_file} ${example_config_file}

# This script uses the M4 macro processor to
# assemble README.md from various manually-written
# and autogenerated parts. See this webpage for
# a nice introduction to M4 usage:
#
# https://www.linuxtoday.com/blog/macro-magic-m4-complete-guide.html

m4 > README.md <<EOF
changequote([[,]])

define([[_TABLE_OF_CONTENTS_]],[[
## Table of Contents
$(markdown-toc --no-firsth1 README.md.m4)
]])

define([[_KEYBOARD_SETTINGS_TABLE_]], [[
$(generate-keyboard-settings-table ${vrkb_dir})
]])

define([[_KEYBOARD_EVENT_SECTIONS_]], [[
$(generate-event-sections ${vrkb_dir})
]])

define([[_EXAMPLE_CONFIG_FILE_PATH_]], [[${example_config_file}]])

$(cat README.md.m4)
EOF

# Generate doxygen documentation

doxygen_dir=doxygen-html
mkdir -p $doxygen_dir

doxygen -g - | \
	(cat; \
	 echo "INPUT=${vrkb_dir}/Assets/VRKB"; \
	 echo "PROJECT_NAME=\"VRKB\""; \
	 echo "PROJECT_BRIEF=\"Virtual Reality Keyboard\""; \
	 echo "STRIP_FROM_PATH=${vrkb_dir}"; \
	 echo "EXTRACT_ALL=NO"; \
	 echo "GENERATE_LATEX=NO"; \
	 echo "SHOW_NAMESPACES=NO"; \
	 echo "RECURSIVE=YES"; \
	 echo "FILE_PATTERNS=*.cs *.png *.wav *.asset *.mat *.unitypackage *.prefab" \
	 echo "EXCLUDE=Assets/VRKB/Scenes"; \
	 echo "HTML_OUTPUT=${doxygen_dir}"; \
	) \
		| doxygen - 2>&1 \
		| tee doxygen.log

